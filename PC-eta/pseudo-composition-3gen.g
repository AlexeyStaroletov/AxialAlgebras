### calculations in PC(-1)-axial algebra generated by three primitive axes a,b, and c

FF:=Rationals;
alp:=Indeterminate(FF,"alp");; ### value of the Frobeinus form between a and b
bet:=Indeterminate(FF,"bet");; ### value of the Frobeinus form between b and c
gam:=Indeterminate(FF,"gam");; ### value of the Frobeinus form between a and c
psi:=Indeterminate(FF,"psi");; ### value of the Frobeinus form between a and bc

F:=FunctionField(FF, 4);  ### 

## order in the basis: a, b, c, ab, bc, ac, abc=a(bc), bac=b(ac), cab=c(ab)
## alp=(a,b), bet=(b,c), gam=(a,c), psi =(a,bc) 

z:=Identity(F); 

a:=    z*[1,0,0,0,0,0,0,0];
b:=    z*[0,1,0,0,0,0,0,0];
c:=    z*[0,0,1,0,0,0,0,0];
ab:=   z*[0,0,0,1,0,0,0,0];
bc:=   z*[0,0,0,0,1,0,0,0];
ac:=   z*[0,0,0,0,0,1,0,0];
abc:=  z*[0,0,0,0,0,0,1,0];
bac:=  z*[0,0,0,0,0,0,0,1];

cab := bet*a + gam*b + alp*c - abc - bac;

L := [a,b,c,ab,bc,ac,abc,bac];  

mas:=[];  ### array for pairwise products of elements of L
for i in [1..8] do
  Add(mas, []);
  for j in [1..8] do
    Add(mas[i], []);
      for k in [1..8] do
        Add(mas[i][j], z*0);
od;od;od;

copy := function(i,j) ### function to make the product symmetric: mas[i][j] = mas[j][i]
  local k;
  for k in [1..8] do
    mas[j][i][k]:=mas[i][j][k];
  od;
end;

prod := function(u,v)    ### function which find the product of two vectors u and v written with respect to L
  local i,j,k, ans;
  ans:=z * 0*a;
  for i in [1..8] do
  for j in [1..8] do
  for k in [1..8] do
    ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
  od; od; od;
  return ans;
end;

gram:=[];   ### the Gram matrix for elements of L
Add(gram, z*[1,alp,gam,alp,psi,gam,psi,alp*gam+1/2*(bet-psi)]);
Add(gram, z*[alp,1,bet,alp,bet,psi,alp*bet+1/2*(gam-psi),psi]);
Add(gram, z*[gam,bet,1,psi,bet,gam,bet*gam+1/2*(alp-psi),bet*gam+1/2*(alp-psi)]);
Add(gram, z*[alp,alp,psi, 1/2*(2*alp^2-alp+1), 1/2*(2*alp*bet+gam-psi), 1/2*(2*alp*gam+bet-psi), 1/4*(4*alp*psi+2*bet+psi-2*alp*bet-gam), 1/4*(4*alp*psi+2*gam+psi-2*alp*gam-bet)]);
Add(gram, z*[psi,bet,bet, 1/2*(2*alp*bet+gam-psi), 1/2*(2*bet^2-bet+1), 1/2*(2*bet*gam+alp-psi), 1/4*((6*bet-1)*(alp+gam)-(4*bet+2)*psi), 1/4*(4*bet*psi+2*gam+psi-2*bet*gam-alp)]);
Add(gram, z*[gam,psi,gam, 1/2*(2*alp*gam+bet-psi), 1/2*(2*bet*gam+alp-psi), 1/2*(2*gam^2-gam+1), 1/4*(4*gam*psi+2*bet+psi-2*bet*gam-alp), 1/4*((6*gam-1)*(alp+bet)-(4*gam+2)*psi)]);
Add(gram, z*[0,0,0,0,0,0,0]);
Add(gram, z*[0,0,0,0,0,0,0]);

gram[7][1]:=gram[1][7]; gram[7][2]:=gram[2][7]; gram[7][3]:=gram[3][7]; gram[7][4]:=gram[4][7]; gram[7][5]:=gram[5][7]; gram[7][6]:=gram[6][7];
gram[8][1]:=gram[1][8]; gram[8][2]:=gram[2][8]; gram[8][3]:=gram[3][8]; gram[8][4]:=gram[4][8]; gram[8][5]:=gram[5][8]; gram[8][6]:=gram[6][8];
gram[7][7] := psi^2+1/2*gram[5][5]-1/2*gram[5][7];
gram[8][8] := psi^2+1/2*gram[6][6]-1/2*gram[6][8];


## a*a
mas[1][1] := a;
## a*b
mas[1][2] := ab;
copy(1,2);
## a*c
mas[1][3] := ac;
copy(1,3);
## b*b
mas[2][2] := b;
## b*c
mas[2][3] := bc;
copy(2,3);
## c*c
mas[3][3] := c;
## a*ab
mas[1][4] := -1/2*ab + alp*a + 1/2*b;
copy(1,4);
## a*bc
mas[1][5] := abc;
copy(1,5);
## a*ac
mas[1][6] := -1/2*ac + gam*a + 1/2*c;
copy(1,6);
## b*ab
mas[2][4] := -1/2*ab + alp*b + 1/2*a;
copy(2,4);
## b*bc
mas[2][5] := -1/2*bc + bet*b + 1/2*c;
copy(2,5);
## b*ac
mas[2][6] := bac;
copy(2,6);
## c*ab
mas[3][4] := cab;
copy(3,4);
## c*bc
mas[3][5] := -1/2*bc + bet*c + 1/2*b;
copy(3,5);
## c*ac
mas[3][6] := -1/2*ac + gam*c + 1/2*a;
copy(3,6);
## ab*ab  (ab,ab)=(a,a(ab)) = (a, -ab/2+alp*a+b/2) =-alp/2+alp^2+alp/2
mas[4][4] := 1/4*( (6*alp-1)*a + (6*alp-1)*b - (4*alp+2)*ab);
## bc*bc
mas[5][5] := 1/4*( (6*bet-1)*b + (6*bet-1)*c - (4*bet+2)*bc);
## ac*ac
mas[6][6] := 1/4*( (6*gam-1)*a + (6*gam-1)*c - (4*gam+2)*ac);
### a*a(bc)
mas[1][7] := psi*a+1/2*bc-1/2*abc;
copy(1,7);
### b*b(ac)
mas[2][8] := psi*b+1/2*ac-1/2*bac;
copy(2,8);
### ab*ac
### a(-1,b)*a(-1,c)=
### 1/9*(b-2ab+alp*a)*(c-2ac+gam*a)=-tmp*a
tmp:=1/9*((b-2*ab+alp*a)*gram*(c-2*ac+gam*a));
mas[4][6] := 1/4*(-9*tmp*a-prod(b+alp*a,c-2*ac+gam*a)+prod(2*ab,c+gam*a));
copy(4,6);
### ba*bc
tmp:=1/9*((a-2*ab+alp*b)*gram*(c-2*bc+bet*b));
mas[4][5] := 1/4*(-9*tmp*b-prod(a+alp*b,c-2*bc+bet*b)+prod(2*ab,c+bet*b));
copy(4,5);
### cb*ca
tmp:=1/9*((b-2*bc+bet*c)*gram*(a-2*ac+gam*c));
mas[5][6] := 1/4*(-9*tmp*c-prod(b+bet*c, a-2*ac+gam*c)+prod(2*bc,a+gam*c));
copy(5,6);

### a*b(ac)
### a*(bac+cab) = a*(bet*a+gam*b+alp*c-abc)
x:=prod(a, bet*a+gam*b+alp*c-abc);
### a*(bac-cab) = 1/2*(bac-cab)-(alp*(c-2*ac+gam*a)+gam*(bet-2*ab+alp*a))
y:=1/2*(bac-cab)-alp*(c-2*ac+gam*a)+gam*(b-2*ab+alp*a);
mas[1][8]:=1/2*(x+y);
copy(1,8);

### b*a(bc)
### b*(abc+cab) = b*(bet*a+gam*b+alp*c-bac)
x:=prod(b, bet*a+gam*b+alp*c-bac);
### a*(abc-cab) = 1/2*(abc-cab)-(alp*(c-2*ac+gam*a)+gam*(bet-2*ab+alp*a))
y:=1/2*(abc-cab)+bet*(a-2*ab+alp*b)-alp*(c-2*bc+bet*b);
mas[2][7]:=1/2*(x+y);
copy(2,7);

### c*bac
### first write c*cab;
ccab := psi*c+ab/2-cab/2;
### now c*(abc+bac)
x:=prod(c, bet*a+gam*b+alp*c)-ccab;
### now c*(abc-bac) = 1/2*(abc-bac)-(alp*(c-2*ac+gam*a)+gam*(bet-2*ab+alp*a))
y:=1/2*(abc-bac)+bet*(a-2*ac+gam*c)-gam*(b-2*bc+bet*c);
mas[3][7]:=1/2*(x+y);
copy(3,7);
### c*bac = 
mas[3][8]:=prod(c, bet*a+gam*b+alp*c-abc)-ccab;
copy(3,8);

##### verify minimal polynomial for  ad_a, ad_b, ad_c
ad_a:=[mas[1][1], mas[1][2], mas[1][3], mas[1][4], mas[1][5], mas[1][6], mas[1][7], mas[1][8]];
 (ad_a-ad_a^0)*(ad_a-1/2*ad_a^0)*(ad_a+ad_a^0);
ad_b:=[mas[2][1], mas[2][2], mas[2][3], mas[2][4], mas[2][5], mas[2][6], mas[2][7], mas[2][8]];
 (ad_b-ad_b^0)*(ad_b-1/2*ad_b^0)*(ad_b+ad_b^0);
ad_c:=[mas[3][1], mas[3][2], mas[3][3], mas[3][4], mas[3][5], mas[3][6], mas[3][7], mas[3][8]];
 (ad_c-ad_c^0)*(ad_c-1/2*ad_c^0)*(ad_c+ad_c^0);

### find the last value of the Gram matrix: (abc,bac)=(bc,a(bac)) 
tmp:=prod(a,bac);
gram[7][8]:= gram[5][1]*tmp[1]+gram[5][2]*tmp[2]+gram[5][3]*tmp[3]+gram[5][4]*tmp[4]+gram[5][5]*tmp[5]+gram[5][6]*tmp[6]+gram[5][7]*tmp[7]+gram[5][8]*tmp[8];
gram[8][7]:=gram[7][8]; 
 
### ab*abc
x:=b;
y:=bc;
alp1:=alp;  ##  (a,x)
bet1:=psi;  ##  (a,y)
psi1:=a*gram*(prod(x,y)); ## (a, x*y)
mas[4][7] :=1/4*( (6*psi1-3*bet)*a+bet1*x+alp1*y-2*bet1*prod(a,x)-2*alp1*prod(a,y)-prod(x,y)+2*prod(x, prod(a,y))+2*prod(y, prod(a,x)) );
copy(4,7);

### ba*bac
x:=a;
y:=ac;
alp1:=alp;  ##  (b,x)
bet1:=psi;  ##  (b,y)
psi1:=b*gram*(prod(a,ac)); ## (a, x*y)
mas[4][8] :=1/4*( (6*psi1-3*gam)*b+bet1*x+alp1*y-2*bet1*prod(b,x)-2*alp1*prod(b,y)-prod(x,y)+2*prod(x, prod(b,y))+2*prod(y, prod(b,x)) );
copy(4,8);

### bc*bac
x:=c;
y:=ac;
alp1:=bet;  ##  (b,x)
bet1:=psi;  ##  (b,y)
psi1:=b*gram*(prod(x,y)); ## (a, x*y)
mas[5][8] :=1/4*( (6*psi1-3*gam)*b+bet1*x+alp1*y-2*bet1*prod(b,x)-2*alp1*prod(b,y)-prod(x,y)+2*prod(x, prod(b,y))+2*prod(y, prod(b,x)) );
copy(5,8);

### bc*abc = bc*(bet*a+gam*b+alp*c-bac-cab);
### first find cb*cab
x:=b;
y:=ab;
alp1:=bet;  ##  (c,x)
bet1:=psi;  ##  (c,y)
psi1:=c*gram*(prod(x,y)); ## (a, x*y)
### find bc*cab
tmp:=1/4*( (6*psi1-3*alp)*c+bet1*x+alp1*y-2*bet1*prod(c,x)-2*alp1*prod(c,y)-prod(x,y)+2*prod(x, prod(c,y))+2*prod(y, prod(c,x)) );
mas[5][7]:=prod(bc, bet*a+gam*b+alp*c)-prod(bc,bac)-tmp;
copy(5,7);

### ac*abc
x:=c;
y:=bc;
alp1:=gam;  ##  (a,x)
bet1:=psi;  ##  (a,y)
psi1:=a*gram*(prod(c,bc)); ## (a, x*y)
mas[6][7] :=1/4*( (6*psi1-3*bet)*a+bet1*x+alp1*y-2*bet1*prod(a,x)-2*alp1*prod(a,y)-prod(x,y)+2*prod(x, prod(a,y))+2*prod(y, prod(a,x)) );
copy(6,7);

### ac*bac = ac*(bet*a+gam*b+alp*c-abc-cab);
### first find ca*cab
x:=a;
y:=ab;
alp1:=gam;  ##  (c,x)
bet1:=psi;  ##  (c,y)
psi1:=c*gram*(prod(x,y)); ## (a, x*y)
tmp:=1/4*( (6*psi1-3*alp)*c+bet1*x+alp1*y-2*bet1*prod(c,x)-2*alp1*prod(c,y)-prod(x,y)+2*prod(x, prod(c,y))+2*prod(y, prod(c,x)) );
mas[6][8]:=prod(ac, bet*a+gam*b+alp*c)-prod(ac,abc)-tmp;
copy(6,8);

### abc*abc;
x:=bc;
y:=bc;
alp1:=psi;  ##  (a,x)
bet1:=psi;  ##  (a,y)
psi1:=a*gram*(prod(bc,bc)); ## (a, x*y)
mas[7][7] :=1/4*( (6*psi1-3*gram[5][5])*a+bet1*x+alp1*y-2*bet1*prod(a,x)-2*alp1*prod(a,y)-prod(x,y)+2*prod(x, prod(a,y))+2*prod(y, prod(a,x)) );

### bac*bac;
x:=ac;
y:=ac;
alp1:=psi;  ##  (b,x)
bet1:=psi;  ##  (b,y)
psi1:=b*gram*(prod(ac,ac)); ## (b, x*y)
mas[8][8] :=1/4*( (6*psi1-3*gram[6][6])*b+bet1*x+alp1*y-2*bet1*prod(b,x)-2*alp1*prod(b,y)-prod(x,y)+2*prod(x, prod(b,y))+2*prod(y, prod(b,x)) );
 
### abc*bac   (abc+bac)^2= (bet*a+gam*b+alp*c-cab)^2  2*abc*bac = (bet*a+gam*b+alp*c)^2 - 2*cab*(bet*a+gam*b+alp*c)+cab^2-abc^2-bac^2
### find cab^2
x:=ab;
y:=ab;
alp1:=psi;  ##  (c,x)
bet1:=psi;  ##  (c,y)
psi1:=c*gram*(prod(ab,ab)); ## (c, x*y)
tmp:=1/4*( (6*psi1-3*gram[4][4])*c+bet1*x+alp1*y-2*bet1*prod(c,x)-2*alp1*prod(c,y)-prod(x,y)+2*prod(x, prod(c,y))+2*prod(y, prod(c,x)) );
mas[7][8] := 1/2 * ( prod(bet*a+gam*b+alp*c, bet*a+gam*b+alp*c) - 2*prod(cab,bet*a+gam*b+alp*c)+tmp-mas[7][7]-mas[8][8]);
copy(7,8);

Determinant(gram) = 3/512*(alp+bet+gam-2*psi-1)^4*(12*alp*bet*gam-2*alp^2+2*alp*bet+2*alp*gam-4*alp*psi-2*bet^2+2*bet*gam-4*bet*psi-2*gam^2-4*gam*psi-2*psi^2+alp+bet+gam-2*psi+1)^3;

### subspaces for ad(a)

bas1:=NullspaceMat(ad_a-ad_a^0);  ### basis for A_1(a)
basm:=NullspaceMat(ad_a+ad_a^0);  ### basis for A_{-1}(a)
bas1m:=[bas1[1], basm[1], basm[2], basm[3]]; ### basis for A_1(a)+A_{-1}(a)
base:=NullspaceMat(ad_a-1/2*ad_a^0);  ### basis for A_{1/2}(a)
U1:=VectorSpace(F, z*bas1);  ### A_1(a)
Um:=VectorSpace(F, z*basm);  ### A_{-1}(a)
Ue:=VectorSpace(F, z*base);  ### A_{1/2}(a)
U1m:=VectorSpace(F, z*bas1m);  ### A_1(a)+A_{-1}(a)

### verification of the fusion rules for a

for i in base do
for j in base do
if not  prod(i,j) in U1m then
   Print("Fail\n");
fi;
od;od;

for i in bas1m do
for j in base do
if not prod(i,j) in Ue then
   Print("Fail\n");
fi;
od;od;

for i in basm do
for j in basm do
if not prod(i,j) in U1 then
   Print("Fail\n");
fi;
od;od;

### subspaces for ad(b)

bas1:=NullspaceMat(ad_b-ad_b^0);  ### basis for A_1(b)
basm:=NullspaceMat(ad_b+ad_b^0);  ### basis for A_{-1}(b)
bas1m:=[bas1[1], basm[1], basm[2], basm[3]];  ### basis for A_1(a)+A_{-1}(b)
base:=NullspaceMat(ad_b-1/2*ad_b^0);  ### basis for A_{1/2}(b)
U1:=VectorSpace(F, z*bas1);   ### A_1(b)
Um:=VectorSpace(F, z*basm);   ### A_{-1}(b)
Ue:=VectorSpace(F, z*base);   ### A_{1/2}(b)
U1m:=VectorSpace(F, z*bas1m); ### A_1(b)+A_{-1}(b)

### verification of the fusion rules for b

for i in base do
for j in base do
if not  prod(i,j) in U1m then
   Print("Fail\n");
fi;
od;od;

for i in bas1m do
for j in base do
if not prod(i,j) in Ue then
   Print("Fail\n");
fi;
od;od;

for i in basm do
for j in basm do
if not prod(i,j) in U1 then
   Print("Fail\n");
fi;
od;od;

### subspaces for ad(c)

bas1:=NullspaceMat(ad_c-ad_c^0);  ### basis for A_1(c)
basm:=NullspaceMat(ad_c+ad_c^0);  ### basis for A_{-1}(c)
bas1m:=[bas1[1], basm[1], basm[2], basm[3]];  ### basis for A_1(c)+A_{-1}(c)
base:=NullspaceMat(ad_c-1/2*ad_c^0);  ### basis for A_{1/2}(c)
U1:=VectorSpace(F, z*bas1);  ### A_1(c)
Um:=VectorSpace(F, z*basm);  ### A_{-1}(c)
Ue:=VectorSpace(F, z*base);  ### A_{1/2}(c)
U1m:=VectorSpace(F, z*bas1m);  ### A_1(c)+A_{-1}(c)

### verification of the fusion rules for c

for i in base do
for j in base do
if not  prod(i,j) in U1m then
   Print("Fail\n");
fi;
od;od;

for i in bas1m do
for j in base do
if not prod(i,j) in Ue then
   Print("Fail\n");
fi;
od;od;

for i in basm do
for j in basm do
if not prod(i,j) in U1 then
   Print("Fail\n");
fi;
od;od;
