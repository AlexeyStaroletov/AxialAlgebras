#### Here we verify that a primitive axial algebra of Jordan type half, which is generated by primitive axes a, b, and c, is a Jordan algebra
#### We suppose that alp=(a,b), bet=(b,c), gam=(a,c) and phi=(a,bc), where (,) is the Frobenius form such that (a,a)=(b,b)=(c,c)=1
####

FF:=Rationals;
eta:=1/2;
alp:=Indeterminate(Rationals,"alp");;
bet:=Indeterminate(Rationals,"bet");;
gam:=Indeterminate(Rationals,"gam");;
phi:=Indeterminate(Rationals,"phi");;

##########################################################################
### main goal is to verify the identity (x^2*y)*x=x^2*(y*x)
### we assume that a basis of the algebra is a, b, c, ab, bc, ac, a(bc), b(ac), c(ab)
### and x=(a1, a2, a3, a4, a5, a6, a7, a8, a9), y=(b1, b2, b3, b4, b5, b6, b7, b8, b9) 
### with respect to this basis
###

a1:=Indeterminate(Rationals,"a1");;
a2:=Indeterminate(Rationals,"a2");;
a3:=Indeterminate(Rationals,"a3");;
a4:=Indeterminate(Rationals,"a4");;
a5:=Indeterminate(Rationals,"a5");;
a6:=Indeterminate(Rationals,"a6");;
a7:=Indeterminate(Rationals,"a7");;
a8:=Indeterminate(Rationals,"a8");;
a9:=Indeterminate(Rationals,"a9");;
b1:=Indeterminate(Rationals,"b1");;
b2:=Indeterminate(Rationals,"b2");;
b3:=Indeterminate(Rationals,"b3");;
b4:=Indeterminate(Rationals,"b4");;
b5:=Indeterminate(Rationals,"b5");;
b6:=Indeterminate(Rationals,"b6");;
b7:=Indeterminate(Rationals,"b7");;
b8:=Indeterminate(Rationals,"b8");;
b9:=Indeterminate(Rationals,"b9");;
F:=FunctionField(FF,22);
z:=alp^0;

########################################################################
### we use the following table of products for elements of the basis 
###

mas:=z *
[ [ [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 1, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1, 0, 0, 0 ], [ 1/2*alp, 0, 0, 1/2, 0, 0, 0, 0, 0 ], 
      [ 0, 0, 0, 0, 0, 0, 1, 0, 0 ], [ 1/2*gam, 0, 0, 0, 0, 1/2, 0, 0, 0 ], [ 1/2*phi, 0, 0, 0, 0, 0, 1/2, 0, 0 ], [ 1/4*phi, 0, 0, 1/4*gam, 0, 1/4*alp, 1/4, 1/4, -1/4 ], [ 1/4*phi, 0, 0, 1/4*gam, 0, 1/4*alp, 1/4, -1/4, 1/4 ] ], 
  [ [ 0, 0, 0, 1, 0, 0, 0, 0, 0 ], [ 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 1, 0, 0, 0, 0 ], [ 0, 1/2*alp, 0, 1/2, 0, 0, 0, 0, 0 ], 
      [ 0, 1/2*bet, 0, 0, 1/2, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 1, 0 ], [ 0, 1/4*phi, 0, 1/4*bet, 1/4*alp, 0, 1/4, 1/4, -1/4 ], [ 0, 1/2*phi, 0, 0, 0, 0, 0, 1/2, 0 ], [ 0, 1/4*phi, 0, 1/4*bet, 1/4*alp, 0, -1/4, 1/4, 1/4 ] ], 
  [ [ 0, 0, 0, 0, 0, 1, 0, 0, 0 ], [ 0, 0, 0, 0, 1, 0, 0, 0, 0 ], [ 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 1 ], 
      [ 0, 0, 1/2*bet, 0, 1/2, 0, 0, 0, 0 ], [ 0, 0, 1/2*gam, 0, 0, 1/2, 0, 0, 0 ], [ 0, 0, 1/4*phi, 0, 1/4*gam, 1/4*bet, 1/4, -1/4, 1/4 ], [ 0, 0, 1/4*phi, 0, 1/4*gam, 1/4*bet, -1/4, 1/4, 1/4 ], [ 0, 0, 1/2*phi, 0, 0, 0, 0, 0, 1/2 ] ], 
  [ [ 1/2*alp, 0, 0, 1/2, 0, 0, 0, 0, 0 ], [ 0, 1/2*alp, 0, 1/2, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 1 ], [ 1/4*alp, 1/4*alp, 0, 1/2*alp, 0, 0, 0, 0, 0 ], 
      [ 0, 1/4*phi, 0, 1/4*bet, 1/4*alp, 0, 1/4, -1/4, 1/4 ], [ 1/4*phi, 0, 0, 1/4*gam, 0, 1/4*alp, -1/4, 1/4, 1/4 ], [ 1/8*alp*bet+1/8*phi, 1/8*phi, 0, 1/4*phi, 1/8*alp, 0, 1/4*alp, 0, 0 ], [ 1/8*phi, 1/8*alp*gam+1/8*phi, 0, 1/4*phi, 0, 1/8*alp, 0, 1/4*alp, 0 ], 
      [ 1/8*alp*bet, 1/8*alp*gam, 0, 1/2*phi, 1/8*alp, 1/8*alp, -1/4*alp, -1/4*alp, 1/2*alp ] ], [ [ 0, 0, 0, 0, 0, 0, 1, 0, 0 ], [ 0, 1/2*bet, 0, 0, 1/2, 0, 0, 0, 0 ], [ 0, 0, 1/2*bet, 0, 1/2, 0, 0, 0, 0 ], 
      [ 0, 1/4*phi, 0, 1/4*bet, 1/4*alp, 0, 1/4, -1/4, 1/4 ], [ 0, 1/4*bet, 1/4*bet, 0, 1/2*bet, 0, 0, 0, 0 ], [ 0, 0, 1/4*phi, 0, 1/4*gam, 1/4*bet, 1/4, 1/4, -1/4 ], [ 0, 1/8*bet*gam, 1/8*alp*bet, 1/8*bet, 1/2*phi, 1/8*bet, 1/2*bet, -1/4*bet, -1/4*bet ], 
      [ 0, 1/8*bet*gam+1/8*phi, 1/8*phi, 0, 1/4*phi, 1/8*bet, 0, 1/4*bet, 0 ], [ 0, 1/8*phi, 1/8*alp*bet+1/8*phi, 1/8*bet, 1/4*phi, 0, 0, 0, 1/4*bet ] ], [ [ 1/2*gam, 0, 0, 0, 0, 1/2, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 1, 0 ], 
      [ 0, 0, 1/2*gam, 0, 0, 1/2, 0, 0, 0 ], [ 1/4*phi, 0, 0, 1/4*gam, 0, 1/4*alp, -1/4, 1/4, 1/4 ], [ 0, 0, 1/4*phi, 0, 1/4*gam, 1/4*bet, 1/4, 1/4, -1/4 ], [ 1/4*gam, 0, 1/4*gam, 0, 0, 1/2*gam, 0, 0, 0 ], 
      [ 1/8*bet*gam+1/8*phi, 0, 1/8*phi, 0, 1/8*gam, 1/4*phi, 1/4*gam, 0, 0 ], [ 1/8*bet*gam, 0, 1/8*alp*gam, 1/8*gam, 1/8*gam, 1/2*phi, -1/4*gam, 1/2*gam, -1/4*gam ], [ 1/8*phi, 0, 1/8*alp*gam+1/8*phi, 1/8*gam, 0, 1/4*phi, 0, 0, 1/4*gam ] ], 
  [ [ 1/2*phi, 0, 0, 0, 0, 0, 1/2, 0, 0 ], [ 0, 1/4*phi, 0, 1/4*bet, 1/4*alp, 0, 1/4, 1/4, -1/4 ], [ 0, 0, 1/4*phi, 0, 1/4*gam, 1/4*bet, 1/4, -1/4, 1/4 ], [ 1/8*alp*bet+1/8*phi, 1/8*phi, 0, 1/4*phi, 1/8*alp, 0, 1/4*alp, 0, 0 ], 
      [ 0, 1/8*bet*gam, 1/8*alp*bet, 1/8*bet, 1/2*phi, 1/8*bet, 1/2*bet, -1/4*bet, -1/4*bet ], [ 1/8*bet*gam+1/8*phi, 0, 1/8*phi, 0, 1/8*gam, 1/4*phi, 1/4*gam, 0, 0 ], [ 1/16*alp*bet+1/16*bet*gam+1/8*bet*phi, 1/16*bet*gam, 1/16*alp*bet, 0, 1/4*phi, 0, 1/8*bet+1/2*phi, 
          -1/8*bet, -1/8*bet ], [ 1/16*bet*gam+1/16*bet*phi, 1/16*bet*gam+1/16*gam*phi, 1/16*alp*phi, 1/8*phi, 1/8*alp*gam+1/8*phi, 1/8*alp*bet+1/8*phi, -1/16*alp+1/16*bet-1/16*gam+1/4*phi, -1/16*alp-1/16*bet+1/16*gam+1/4*phi, 1/16*alp-1/16*bet-1/16*gam-1/4*phi ], 
      [ 1/16*alp*bet+1/16*bet*phi, 1/16*gam*phi, 1/16*alp*bet+1/16*alp*phi, 1/8*bet*gam+1/8*phi, 1/8*alp*gam+1/8*phi, 1/8*phi, -1/16*alp+1/16*bet-1/16*gam+1/4*phi, -1/16*alp-1/16*bet+1/16*gam-1/4*phi, 1/16*alp-1/16*bet-1/16*gam+1/4*phi ] ], 
  [ [ 1/4*phi, 0, 0, 1/4*gam, 0, 1/4*alp, 1/4, 1/4, -1/4 ], [ 0, 1/2*phi, 0, 0, 0, 0, 0, 1/2, 0 ], [ 0, 0, 1/4*phi, 0, 1/4*gam, 1/4*bet, -1/4, 1/4, 1/4 ], [ 1/8*phi, 1/8*alp*gam+1/8*phi, 0, 1/4*phi, 0, 1/8*alp, 0, 1/4*alp, 0 ], 
      [ 0, 1/8*bet*gam+1/8*phi, 1/8*phi, 0, 1/4*phi, 1/8*bet, 0, 1/4*bet, 0 ], [ 1/8*bet*gam, 0, 1/8*alp*gam, 1/8*gam, 1/8*gam, 1/2*phi, -1/4*gam, 1/2*gam, -1/4*gam ], [ 1/16*bet*gam+1/16*bet*phi, 1/16*bet*gam+1/16*gam*phi, 1/16*alp*phi, 1/8*phi, 1/8*alp*gam+1/8*phi, 
          1/8*alp*bet+1/8*phi, -1/16*alp+1/16*bet-1/16*gam+1/4*phi, -1/16*alp-1/16*bet+1/16*gam+1/4*phi, 1/16*alp-1/16*bet-1/16*gam-1/4*phi ], [ 1/16*bet*gam, 1/16*alp*gam+1/16*bet*gam+1/8*gam*phi, 1/16*alp*gam, 0, 0, 1/4*phi, -1/8*gam, 1/8*gam+1/2*phi, -1/8*gam ], 
      [ 1/16*bet*phi, 1/16*alp*gam+1/16*gam*phi, 1/16*alp*gam+1/16*alp*phi, 1/8*bet*gam+1/8*phi, 1/8*phi, 1/8*alp*bet+1/8*phi, -1/16*alp+1/16*bet-1/16*gam-1/4*phi, -1/16*alp-1/16*bet+1/16*gam+1/4*phi, 1/16*alp-1/16*bet-1/16*gam+1/4*phi ] ], 
  [ [ 1/4*phi, 0, 0, 1/4*gam, 0, 1/4*alp, 1/4, -1/4, 1/4 ], [ 0, 1/4*phi, 0, 1/4*bet, 1/4*alp, 0, -1/4, 1/4, 1/4 ], [ 0, 0, 1/2*phi, 0, 0, 0, 0, 0, 1/2 ], [ 1/8*alp*bet, 1/8*alp*gam, 0, 1/2*phi, 1/8*alp, 1/8*alp, -1/4*alp, -1/4*alp, 1/2*alp ], 
      [ 0, 1/8*phi, 1/8*alp*bet+1/8*phi, 1/8*bet, 1/4*phi, 0, 0, 0, 1/4*bet ], [ 1/8*phi, 0, 1/8*alp*gam+1/8*phi, 1/8*gam, 0, 1/4*phi, 0, 0, 1/4*gam ], [ 1/16*alp*bet+1/16*bet*phi, 1/16*gam*phi, 1/16*alp*bet+1/16*alp*phi, 1/8*bet*gam+1/8*phi, 1/8*alp*gam+1/8*phi, 
          1/8*phi, -1/16*alp+1/16*bet-1/16*gam+1/4*phi, -1/16*alp-1/16*bet+1/16*gam-1/4*phi, 1/16*alp-1/16*bet-1/16*gam+1/4*phi ], [ 1/16*bet*phi, 1/16*alp*gam+1/16*gam*phi, 1/16*alp*gam+1/16*alp*phi, 1/8*bet*gam+1/8*phi, 1/8*phi, 1/8*alp*bet+1/8*phi, 
          -1/16*alp+1/16*bet-1/16*gam-1/4*phi, -1/16*alp-1/16*bet+1/16*gam+1/4*phi, 1/16*alp-1/16*bet-1/16*gam+1/4*phi ], [ 1/16*alp*bet, 1/16*alp*gam, 1/16*alp*bet+1/16*alp*gam+1/8*alp*phi, 1/4*phi, 0, 0, -1/8*alp, -1/8*alp, 1/8*alp+1/2*phi ] ] ];;

###############################################################################################
### this function evaluetes the product of two vectors with the aid the table of products mas
###

prod := function(u,v)
 
local i,j,k, ans;
 
ans:=[0*z,0*z,0*z,0*z,0*z,0*z,0*z,0*z,0*z];
 
for i in [1..9] do
for j in [1..9] do
for k in [1..9] do
ans[k] := ans[k] + u[i]*v[j]*mas[i][j][k];
od;
od;
od;
 
return ans;
 
end;

#############################################
## define elements of the basis
##

a:=z*[1,0,0,0,0,0,0,0,0];
b:=z*[0,1,0,0,0,0,0,0,0];
c:=z*[0,0,1,0,0,0,0,0,0];
ab:=z*[0,0,0,1,0,0,0,0,0];
bc:=z*[0,0,0,0,1,0,0,0,0];
ac:=z*[0,0,0,0,0,1,0,0,0];
abc:=z*[0,0,0,0,0,0,1,0,0];
bac:=z*[0,0,0,0,0,0,0,1,0];
cab:=z*[0,0,0,0,0,0,0,0,1];
L:=[a,b,c,ab,bc,ac,abc,bac,cab];

############################
coef1:=[a1,a2,a3,a4,a5,a6,a7,a8,a9];
coef2:=[b1,b2,b3,b4,b5,b6,b7,b8,b9]; 

#### x = a1*L[1]+a2*L[2] ....+a9*L[9] and  y= b1*L[1]+b2*L[2] ....+b9*L[9] 
### find (xy)(xx)

sum1:=z*[0,0,0,0,0,0,0,0,0]; 
for i in [1..9] do
for j in [1..9] do
for k in [1..9] do
for t in [1..9] do
sum1:=sum1 + coef1[i]*coef2[j]*coef1[k]*coef1[t]*prod(prod(L[i],L[j]), prod(L[k], L[t]));
od;od;od;od;

### find  x(y(xx))

sum2:=z*[0,0,0,0,0,0,0,0,0]; 
for i in [1..9] do
for j in [1..9] do
for k in [1..9] do
for t in [1..9] do
sum2:=sum2 + coef1[i]*coef2[j]*coef1[k]*coef1[t]*prod(L[i], prod(L[j], prod(L[k], L[t])));
od;od;od;od;

####### verify the identity

sum1 = sum2;
	